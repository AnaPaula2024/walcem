Para conseguir rodar este projeto, depois de clonar o repositório, vocês terão que rodar os seguintes comandos, um por vez: npm install, npm install styled-components, npm install react-router-dom, npm install @fortawesome/react-fontawesome, npm install @fortawesome/free-solid-svg-icons, npm install @fortawesome/free-brands-svg-icons, npm install react-toastify. Depois disso, poderão dar o comando npm run dev para rodar o projeto. Na pasta src, vocês irão encontrar duas pastas: uma chamada components e outra pages. A pasta components contém os componentes GLOBAIS que podem estar presentes em todos os arquivos, como, por exemplo, a barra de navegação. Não adicionem nada nesta pasta, a não ser que realmente tenha algum componente que vocês queiram que esteja na maioria das páginas dos projetos.

Agora, a pasta pages é onde vocês vão mexer. Ela possui duas pastas: uma Login e uma Home. Se vocês abrirem e observarem, verão que dentro dessas pastas há uma pasta de assets e uma de components, junto com seu respectivo arquivo Home.jsx para a pasta Home e um Login.jsx para a pasta Login. Esta será a estrutura de arquivos que vocês irão seguir. Sempre que forem adicionar uma página nova, terão que criar uma pasta na pasta pages com o nome da página, a pasta de components para vocês deixarem os componentes desta página e, na pasta assets, vocês irão criar uma pasta img e colocar as imagens que a página precisar lá dentro. 
 
Dentro do arquivo, quero que saibam que vocês não irão mais criar arquivos JavaScript e CSS separados. Todo o HTML, CSS e JavaScript terá que estar dentro do devido arquivo de seu componente. Para utilizar o CSS, vocês, dentro do mesmo arquivo, irão utilizar styled-components [vejam o readme que lá mostra como funciona]. É recomendável instalar uma extensão chamada vscode-styled-components para estilizar de maneira mais dinâmica. 
 
Para vocês poderem ir até essa página que vocês criaram, terão que ir lá no App.jsx, adicionar uma tag <Route /> e, dentro dela, colocar um caminho para a página com path, sempre usando barra, por exemplo: <Route path="/blog" />. E, depois disso, colocarão a página de vocês, definindo o atributo element também dentro da tag, ficando <Route path="/blog" element={<Blog />} />. Isso só vai definir o caminho para a página de vocês. Para conseguir acessá-la, vocês terão que ir até a pasta components, lá fora da pasta pages, e dentro da pasta Header, no arquivo Header.jsx, vocês verão que haverá várias tags <Link />. Elas são os botões que têm na barra de navegação. Para conseguir ir para a página de vocês, terão que adicionar o atributo to="" e, dentro das aspas, adicionar aquela barra que vocês definiram lá no path, por exemplo: <Link to="/blog" />. Mas, por padrão, vocês já irão ver que os links já estão com o atributo to="" definido para algumas rotas. Então, caso criem algum path com a rota que está definida no <Link />, quando clicarem no link da barra de navegação, já irão para lá. Porém, caso queiram definir algum botão para ir para alguma nova página de vocês, já sabem este processo. 
 
E lembrando que todo componente precisará ser exportado e depois importado para outra página. Além disso, não esqueçam de importar o styled-components para toda outra página que criarem.

Caso já tenham código pronto que desejam refatorar, podem simplesmente jogar todo o css html e javascript da página de vocês no chat gpt e mandar ele refatorar o código em um arquivo vite + react com styled-components definido para os estilos no mesmo arquivo, porém o acesso de vocês pode ser limitado então, entendam o processo